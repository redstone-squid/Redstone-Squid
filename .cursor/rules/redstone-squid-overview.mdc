---
description: This rule contains comprehensive information about the Redstone Squid Discord bot project structure, codebase organization, and development workflow.
globs: 
alwaysApply: false
---
# Redstone Squid Project Overview

## Project Purpose
Redstone Squid is a Discord bot designed to manage and streamline the submission, review, and approval process for Minecraft redstone contraption records. The bot automates database management for redstone building records and provides a comprehensive submission workflow with community voting features.

## Core Directory Structure

### `/squid/` - Main Application Code
- **`/squid/bot/`** - Discord bot implementation with commands, utilities, and event handlers
- **`/squid/db/`** - Database layer with models, queries, and schema definitions  
- **`/squid/google/`** - Google Services integration for Forms/Sheets
- **`/squid/config.py`** - Bot configuration and constants

### `/supabase/` - Database Management  
Do not try to edit this directory directly. It is managed by Supabase and contains the database schema and migrations.
If you want to read the current schema, you can see it in schema_dump.sql.

## Database Schema
The database uses PostgreSQL via Supabase with these core tables:
- **`submissions`** - Redstone contraption record submissions with detailed specifications
- **`builds`** - Approved builds with metadata and links
- **`server_settings`** - Per-Discord-server configuration for channels
- **`messages`** - Tracking of bot messages across servers
- **`vote_sessions`** - Community voting system for submission validation
- **`users`** - User verification and authentication

## Bot Features & Commands
- **Submission Management**: `!submissions` commands for reviewing, confirming, and denying records
- **Server Settings**: `!settings` commands for configuring channels and bot behavior
- **Record Posting**: Automatic posting of confirmed records to configured Discord channels
- **Voting System**: Community-driven validation of submissions
- **Admin Commands**: Moderation and management tools
- **Help System**: Self-documenting command help via discord.py

## Development Workflow
- **Environment**: Virtual environment managed via `uv` package manager
- **Code Quality**: `just lint` for linting + formatting, `just typecheck` for type checking
- **Testing**: Basic pytest setup in `/tests/` directory
