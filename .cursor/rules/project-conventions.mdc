---
description: 
globs: 
alwaysApply: true
---
## The Golden Rule  
When unsure about implementation details, ALWAYS ask the developer.

For code implementation requests, if you are even slightly unsure how to implement it, make sure to add a comment saying you are unsure.

## Project: Redstone Squid Discord Bot

This is a Discord bot for managing Minecraft redstone build submissions, built with Python 3.12+ and discord.py. The bot manages a database of records, handles voting on submissions, and provides automated moderation features.

### Architecture Decisions
- **Modern Python**: Python 3.12+ with async/await throughout the codebase
- **Discord.py**: Primary framework for Discord bot functionality with extensions (cogs)
- **Supabase**: PostgreSQL database with real-time features for data persistence
- **Runtime Validation**: Beartype for runtime type checking on critical paths
- **Docker**: Containerized deployment with multi-stage builds
- **Just**: Task runner for development workflows (justfiles over Makefiles)

### Code Style
- **Format**: Google-style docstrings, always include "Args" and "Returns" unless the values are simple to understand.
- **Type Safety**: Full type hints on function signatures. Avoid `Any` types unless strictly necessary.
    Inside functions, use `# type: ignore` only when absolutely necessary, and document the reason.
    Use type hints on variables and class attributes that cannot be inferred by the type checker.
    Type hints must Python 3.12 syntax. i.e. you should never use `from typing import List` as this is deprecated, directly use `list` instead.
    Also you should never import `Generator`/`Iterator`/etc from `typing`, use `from collections.abc import Generator, Iterator`.

### Patterns to Follow
- **Cog Architecture**: Organize bot commands into logical cogs/extensions
- **Separation of Concerns**: Use `squid.bot` for frontend (bot) logic, `squid.db` for database operations.

### What NOT to Do
- **Don't skip error handling**: Always handle exceptions gracefully
- **Don't block the event loop**: Use asyncio primitives for concurrent operations
- **Don't use Python 3.8 typings**: Never import `List`, `Tuple` or other deprecated classes from `typing`, use `list`, `tuple` etc. instead, or import from `collections.abc`

## Anchor comments  

Add specially formatted comments throughout the codebase, where appropriate, for yourself as inline knowledge that can be easily `grep`ped for.  

### Guidelines:  

- Use `AIDEV-NOTE:`, `AIDEV-TODO:`, or `AIDEV-QUESTION:` (all-caps prefix) for comments aimed at AI and developers.  
- Keep them concise (â‰¤ 120 chars).  
- **Important:** Before scanning files, always first try to **locate existing anchors** `AIDEV-*` in relevant subdirectories.  
- **Update relevant anchors** when modifying associated code.  
- **Do not remove `AIDEV-NOTE`s** without explicit human instruction.  
Example:  
# AIDEV-NOTE: perf-hot-path; avoid extra allocations (see ADR-24)  
async def render_feed(...):  
    ...  

## Extra Information

- The current database schema is in `schema_dump.sql` in the root directory.