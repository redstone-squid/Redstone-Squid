---
description: 
globs: 
alwaysApply: true
---
## The Golden Rule  
When unsure about implementation details, ALWAYS ask the developer.

## Project: Redstone Squid Discord Bot

This is a Discord bot for managing Minecraft redstone build submissions, built with Python 3.12+ and discord.py. The bot manages a database of records, handles voting on submissions, and provides automated moderation features.

### Architecture Decisions
- **Modern Python**: Python 3.12+ with async/await throughout the codebase
- **Discord.py**: Primary framework for Discord bot functionality with extensions (cogs)
- **Supabase**: PostgreSQL database with real-time features for data persistence
- **Runtime Validation**: Beartype for runtime type checking on critical paths
- **Docker**: Containerized deployment with multi-stage builds
- **Just**: Task runner for development workflows (justfiles over Makefiles)

### Code Style
- **Formatting**: Ruff with 120-character lines and Python 3.12 target
- **Testing**: pytest with asyncio support, markers for test categories (unit/integration/external)
- **Documentation**: Google-style docstrings with type information
- **Type Safety**: Full type hints with BasedPyright for static analysis, types must be fully parameterized if it is not possible to be inferred from usage.

### Patterns to Follow
- **Cog Architecture**: Organize bot commands into logical cogs/extensions
- **Separation of Concerns**: Use `squid.bot` for frontend (bot) logic, `squid.db` for database operations.

### What NOT to Do
- **Don't bypass type hints**: Avoid `Any` types unless strictly necessary
- **Don't skip error handling**: Always handle exceptions gracefully
- **Don't block the event loop**: Use asyncio primitives for concurrent operations

## Anchor comments  

Add specially formatted comments throughout the codebase, where appropriate, for yourself as inline knowledge that can be easily `grep`ped for.  

### Guidelines:  

- Use `AIDEV-NOTE:`, `AIDEV-TODO:`, or `AIDEV-QUESTION:` (all-caps prefix) for comments aimed at AI and developers.  
- Keep them concise (â‰¤ 120 chars).  
- **Important:** Before scanning files, always first try to **locate existing anchors** `AIDEV-*` in relevant subdirectories.  
- **Update relevant anchors** when modifying associated code.  
- **Do not remove `AIDEV-NOTE`s** without explicit human instruction.  
Example:  
# AIDEV-NOTE: perf-hot-path; avoid extra allocations (see ADR-24)  
async def render_feed(...):  
    ...  
